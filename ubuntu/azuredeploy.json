{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "labName": {
            "type": "string",
            "metadata": {
                "description": "Short name identifying the lab ex. follislab"
            }
        },
        "vmInstancesManagers": {
            "type": "int",
            "metadata": {
                "description": "Number of manager nodes"
            },
            "defaultValue": 3
        },
        "vmInstancesWorkers": {
            "type": "int",
            "metadata": {
                "description": "Number of worker nodes"
            },
            "defaultValue": 3
        },
        "vmInstancesDTR": {
            "type": "int",
            "metadata": {
                "description": "Number of DTR worker nodes"
            },
            "defaultValue": 3
        },
        "dockerEEURL": {
            "type": "securestring",
            "metadata": {
                "description": "Subscription URL from Docker Store"
            }
        }
    },
    "variables": {
        "storage": {
            "diagnostics": "[concat('diagnostics', uniqueString(resourceGroup().id))]",
            "dtr": "[concat('dtrstorage', uniqueString(resourceGroup().id))]"
        },
        "vNet": {
            "name": "[parameters('labName')]",
            "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('labName'))]"
        },
        "managers": {
            "instances": "[parameters('vmInstancesManagers')]",
            "avSet": "managers",
            "subnet": "[concat(variables('vNet').id, '/subnets/', 'managers')]",
            "vmSize": "Standard_DS2_v2",
            "imagePublisher": "Canonical",
            "imageOffer": "UbuntuServer",
            "imageSku": "16.04-LTS"
        },
        "workers": {
            "instances": "[parameters('vmInstancesWorkers')]",
            "avSet": "workers",
            "subnet": "[concat(variables('vNet').id, '/subnets/', 'workers')]",
            "vmSize": "Standard_DS2_v2",
            "imagePublisher": "Canonical",
            "imageOffer": "UbuntuServer",
            "imageSku": "16.04-LTS"
        },
        "dtr": {
            "instances": "[parameters('vmInstancesDTR')]",
            "avSet": "dtr",
            "subnet": "[concat(variables('vNet').id, '/subnets/', 'dtr')]",
            "vmSize": "Standard_DS2_v2",
            "imagePublisher": "Canonical",
            "imageOffer": "UbuntuServer",
            "imageSku": "16.04-LTS"
        },
        "dc": {
            "subnet": "[concat(variables('vNet').id, '/subnets/', 'dc')]",
            "vmSize": "Standard_DS2_v2",
            "imagePublisher": "MicrosoftWindowsServer",
            "imageOffer": "WindowsServer",
            "imageSku": "2016-Datacenter",
            "domainName": "contoso.local"
        },
        "scripts": {
            "installDocker": "https://gist.githubusercontent.com/stevenfollis/91d2b64b07a3c2110f879727761fbf1f/raw/956a512940052d6c3d1bc0a6ca354c4c2e84bd8b/install-dockeree.sh",
            "installUCP": "https://gist.githubusercontent.com/stevenfollis/91d2b64b07a3c2110f879727761fbf1f/raw/2cbce6703c05ea743488243d1ffa0abcab42bbb0/install-ucp.sh",
            "configureAD": "https://github.com/Azure/azure-quickstart-templates/raw/master/active-directory-new-domain/DSC/CreateADPDC.zip",
            "createTestUsers": "https://gist.githubusercontent.com/stevenfollis/f86f6e7855e79e8047584fe021bde1fc/raw/9a89198a5ab765cc612f46a519d323535a4ef4a4/CreateTestUsers.ps1"
        }
    },
    "resources": [
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[parameters('labName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "VirtualNetwork"
            },
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "10.0.0.0/16"
                    ]
                },
                "subnets": [
                    {
                        "name": "managers",
                        "properties": {
                            "addressPrefix": "10.0.0.0/24"
                        }
                    },
                    {
                        "name": "workers",
                        "properties": {
                            "addressPrefix": "10.0.1.0/24"
                        }
                    },
                    {
                        "name": "dtr",
                        "properties": {
                            "addressPrefix": "10.0.2.0/24"
                        }
                    },
                    {
                        "name": "dc",
                        "properties": {
                            "addressPrefix": "10.0.3.0/24"
                        }
                    }
                ]
            }
        },
        {
            "name": "[variables('storage').diagnostics]",
            "type": "Microsoft.Storage/storageAccounts",
            "location": "[resourceGroup().location]",
            "apiVersion": "2016-01-01",
            "sku": {
                "name": "Standard_LRS"
            },
            "dependsOn": [],
            "tags": {
                "displayName": "DiagnosticStorageAccount"
            },
            "kind": "Storage"
        },
        {
            "name": "[variables('storage').dtr]",
            "type": "Microsoft.Storage/storageAccounts",
            "location": "[resourceGroup().location]",
            "apiVersion": "2016-01-01",
            "sku": {
                "name": "Standard_LRS"
            },
            "dependsOn": [],
            "tags": {
                "displayName": "DTRStorageAccount"
            },
            "kind": "BlobStorage",
            "properties": {
                "accessTier": "Hot",
                "encryption": {
                    "keySource": "Microsoft.Storage",
                    "services": {
                        "blob": {
                            "enabled": true
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "managers",
            "apiVersion": "2016-04-30-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "platformFaultDomainCount": 2,
                "platformUpdateDomainCount": 5
            },
            "sku": {
                "name": "Aligned"
            }
        },
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "workers",
            "apiVersion": "2016-04-30-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "platformFaultDomainCount": 2,
                "platformUpdateDomainCount": 5
            },
            "sku": {
                "name": "Aligned"
            }
        },
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "dtr",
            "apiVersion": "2016-04-30-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "platformFaultDomainCount": 2,
                "platformUpdateDomainCount": 5
            },
            "sku": {
                "name": "Aligned"
            }
        },
        {
            "apiVersion": "2016-03-30",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[concat('manager', padLeft(copyIndex(1), 2, '0'))]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "PIPCopy",
                "count": "[variables('managers').instances]"
            },
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[concat(parameters('labName'), 'manager', padLeft(copyIndex(1), 2, '0'))]"
                }
            }
        },
        {
            "apiVersion": "2016-03-30",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "ucp",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[concat(parameters('labName'), 'ucp')]"
                }
            }
        },
        {
            "apiVersion": "2016-03-30",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "apps",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "Static",
                "dnsSettings": {
                    "domainNameLabel": "[concat(parameters('labName'), 'apps')]"
                }
            }
        },
        {
            "apiVersion": "2016-03-30",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "dtr",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[concat(parameters('labName'), 'dtr')]"
                }
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat('manager', padLeft(copyIndex(1), 2, '0'))]",
            "apiVersion": "2017-06-01",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "NICCopy",
                "count": "[variables('managers').instances]"
            },
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat('manager', padLeft(copyIndex(1), 2, '0')))]"
                            },
                            "subnet": {
                                "id": "[variables('managers').subnet]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'ucp'),'/backendAddressPools/LoadBalancerBackEnd')]"
                                }
                            ]
                        }
                    }
                ]
            },
            "dependsOn": [
                "[variables('vNet').id]",
                "[resourceId('Microsoft.Network/publicIPAddresses', concat('manager', padLeft(copyIndex(1), 2, '0')))]",
                "[concat('Microsoft.Network/loadBalancers/', 'ucp')]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "manager01",
            "apiVersion": "2016-04-30-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('managers').vmSize]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('managers').imagePublisher]",
                        "offer": "[variables('managers').imageOffer]",
                        "sku": "[variables('managers').imageSku]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "manager01",
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "Premium_LRS"
                        },
                        "caching": "ReadWrite"
                    }
                },
                "osProfile": {
                    "computerName": "manager01",
                    "adminUsername": "eeadmin",
                    "adminPassword": "Docker123!"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', 'manager01')]"
                        }
                    ]
                },
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', 'managers')]"
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storage').diagnostics), '2016-01-01').primaryEndpoints.blob]"
                    }
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/availabilitySets/', variables('managers').avSet)]",
                "[concat('Microsoft.Storage/storageAccounts/', variables('storage').diagnostics)]",
                "[concat('Microsoft.Network/networkInterfaces/', 'manager01')]"
            ],
            "resources": [
                {
                    "name": "InstallDocker",
                    "type": "extensions",
                    "location": "[resourceGroup().location]",
                    "apiVersion": "2016-04-30-preview",
                    "dependsOn": [
                        "[concat('Microsoft.Compute/virtualMachines/', 'manager01')]"
                    ],
                    "tags": {
                        "displayName": "InstallDocker"
                    },
                    "properties": {
                        "publisher": "Microsoft.Azure.Extensions",
                        "type": "CustomScript",
                        "typeHandlerVersion": "2.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                            "fileUris": [
                                "[variables('scripts').installDocker]",
                                "[variables('scripts').installUCP]"
                            ]
                        },
                        "protectedSettings": {
                            "commandToExecute": "[concat('sh install-dockeree.sh ', parameters('dockerEEURL'), ' && sh install-ucp.sh')]"
                        }
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat('manager', padLeft(copyIndex(2), 2, '0'))]",
            "apiVersion": "2016-04-30-preview",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "VMcopy",
                "count": "[sub(variables('managers').instances, 1)]"
            },
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('managers').vmSize]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('managers').imagePublisher]",
                        "offer": "[variables('managers').imageOffer]",
                        "sku": "[variables('managers').imageSku]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[concat('manager', padLeft(copyIndex(2), 2, '0'))]",
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "Premium_LRS"
                        },
                        "caching": "ReadWrite"
                    }
                },
                "osProfile": {
                    "computerName": "[concat('manager', padLeft(copyIndex(2), 2, '0'))]",
                    "adminUsername": "eeadmin",
                    "adminPassword": "Docker123!"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat('manager', padLeft(copyIndex(2), 2, '0')))]"
                        }
                    ]
                },
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', 'managers')]"
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storage').diagnostics), '2016-01-01').primaryEndpoints.blob]"
                    }
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', 'manager01')]",
                "[concat('Microsoft.Compute/availabilitySets/', variables('managers').avSet)]",
                "[concat('Microsoft.Storage/storageAccounts/', variables('storage').diagnostics)]",
                "[concat('Microsoft.Network/networkInterfaces/', concat('manager', padLeft(copyIndex(2), 2, '0')))]"
            ],
            "resources": [
                {
                    "name": "InstallDocker",
                    "type": "extensions",
                    "location": "[resourceGroup().location]",
                    "apiVersion": "2016-04-30-preview",
                    "dependsOn": [
                        "[concat('Microsoft.Compute/virtualMachines/', concat('manager', padLeft(copyIndex(2), 2, '0')))]"
                    ],
                    "tags": {
                        "displayName": "InstallDocker"
                    },
                    "properties": {
                        "publisher": "Microsoft.Azure.Extensions",
                        "type": "CustomScript",
                        "typeHandlerVersion": "2.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                            "fileUris": [
                                "[variables('scripts').installDocker]"
                            ]
                        },
                        "protectedSettings": {
                            "commandToExecute": "[concat('sh install-dockeree.sh ', parameters('dockerEEURL'), ' && docker swarm join --token ', json(split(reference(resourceId('Microsoft.Compute/virtualMachines/extensions/', 'manager01', 'InstallDocker')).instanceView.statuses[0].message, '@@@')[1]).tokens.manager, ' ', reference(concat('Microsoft.Network/networkInterfaces/', 'manager01'), '2017-03-01').ipConfigurations[0].properties.privateIPAddress, ':2377')]"
                        }
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "name": "ucp",
            "apiVersion": "2017-06-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "LoadBalancerFrontEnd",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'ucp')]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "LoadBalancerBackEnd"
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "ucp443",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'ucp'), '/frontendIpConfigurations/LoadBalancerFrontEnd')]"
                            },
                            "frontendPort": 443,
                            "backendPort": 443,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 4,
                            "protocol": "Tcp",
                            "loadDistribution": "Default",
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'ucp'), '/backendAddressPools/LoadBalancerBackEnd')]"
                            },
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'ucp'), '/probes/probe443')]"
                            }
                        }
                    },
                    {
                        "name": "ucp80",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'ucp'), '/frontendIpConfigurations/LoadBalancerFrontEnd')]"
                            },
                            "frontendPort": 80,
                            "backendPort": 80,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 4,
                            "protocol": "Tcp",
                            "loadDistribution": "Default",
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'ucp'), '/backendAddressPools/LoadBalancerBackEnd')]"
                            },
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'ucp'), '/probes/probe80')]"
                            }
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "probe443",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 443,
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        }
                    },
                    {
                        "name": "probe80",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 80,
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        }
                    }
                ]
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', 'ucp')]"
            ]
        },
        {
            "apiVersion": "2016-03-30",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[concat('worker', padLeft(copyIndex(1), 2, '0'))]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "PIPCopy",
                "count": "[variables('workers').instances]"
            },
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[concat(parameters('labName'), 'worker', padLeft(copyIndex(1), 2, '0'))]"
                }
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat('worker', padLeft(copyIndex(1), 2, '0'))]",
            "apiVersion": "2016-03-30",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "NICCopy",
                "count": "[variables('workers').instances]"
            },
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[concat('10.0.1.', copyIndex(5))]",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat('worker', padLeft(copyIndex(1), 2, '0')))]"
                            },
                            "subnet": {
                                "id": "[variables('workers').subnet]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'apps'),'/backendAddressPools/LoadBalancerBackEnd')]"
                                }
                            ]
                        }
                    }
                ],
                "dnsSettings": {
                    "dnsServers": []
                },
                "enableIPForwarding": false
            },
            "dependsOn": [
                "[variables('vNet').id]",
                "[resourceId('Microsoft.Network/publicIPAddresses', concat('worker', padLeft(copyIndex(1), 2, '0')))]",
                "[concat('Microsoft.Network/loadBalancers/', 'apps')]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat('worker', padLeft(copyIndex(1), 2, '0'))]",
            "apiVersion": "2016-04-30-preview",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "VMcopy",
                "count": "[variables('workers').instances]"
            },
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('workers').vmSize]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('workers').imagePublisher]",
                        "offer": "[variables('workers').imageOffer]",
                        "sku": "[variables('workers').imageSku]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[concat('worker', padLeft(copyIndex(1), 2, '0'))]",
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "Premium_LRS"
                        },
                        "caching": "ReadWrite"
                    }
                },
                "osProfile": {
                    "computerName": "[concat('worker', padLeft(copyIndex(1), 2, '0'))]",
                    "adminUsername": "eeadmin",
                    "adminPassword": "Docker123!"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat('worker', padLeft(copyIndex(1), 2, '0')))]"
                        }
                    ]
                },
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', 'workers')]"
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storage').diagnostics), '2016-01-01').primaryEndpoints.blob]"
                    }
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/availabilitySets/', variables('workers').avSet)]",
                "[concat('Microsoft.Storage/storageAccounts/', variables('storage').diagnostics)]",
                "[resourceId('Microsoft.Network/networkInterfaces', concat('worker', padLeft(copyIndex(1), 2, '0')))]"
            ],
            "resources": [
                {
                    "name": "InstallDocker",
                    "type": "extensions",
                    "location": "[resourceGroup().location]",
                    "apiVersion": "2016-04-30-preview",
                    "dependsOn": [
                        "[concat('Microsoft.Compute/virtualMachines/', 'manager01')]",
                        "[concat('Microsoft.Compute/virtualMachines/', concat('worker', padLeft(copyIndex(1), 2, '0')))]"
                    ],
                    "tags": {
                        "displayName": "InstallDocker"
                    },
                    "properties": {
                        "publisher": "Microsoft.Azure.Extensions",
                        "type": "CustomScript",
                        "typeHandlerVersion": "2.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                            "fileUris": [
                                "[variables('scripts').installDocker]"
                            ]
                        },
                        "protectedSettings": {
                            "commandToExecute": "[concat('sh install-dockeree.sh ', parameters('dockerEEURL'), ' && docker swarm join --token ', json(split(reference(resourceId('Microsoft.Compute/virtualMachines/extensions/', 'manager01', 'InstallDocker')).instanceView.statuses[0].message, '@@@')[1]).tokens.worker, ' ', reference(concat('Microsoft.Network/networkInterfaces/', 'manager01'), '2017-03-01').ipConfigurations[0].properties.privateIPAddress, ':2377')]"
                        }
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "name": "apps",
            "apiVersion": "2017-06-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "LoadBalancerFrontEnd",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'apps')]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "LoadBalancerBackEnd"
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "ucp8443",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'apps'), '/frontendIpConfigurations/LoadBalancerFrontEnd')]"
                            },
                            "frontendPort": 8443,
                            "backendPort": 8443,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 4,
                            "protocol": "Tcp",
                            "loadDistribution": "Default",
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'apps'), '/backendAddressPools/LoadBalancerBackEnd')]"
                            },
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'apps'), '/probes/probe8443')]"
                            }
                        }
                    },
                    {
                        "name": "ucp80",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'apps'), '/frontendIpConfigurations/LoadBalancerFrontEnd')]"
                            },
                            "frontendPort": 80,
                            "backendPort": 80,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 4,
                            "protocol": "Tcp",
                            "loadDistribution": "Default",
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'apps'), '/backendAddressPools/LoadBalancerBackEnd')]"
                            },
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'apps'), '/probes/probe80')]"
                            }
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "probe8443",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 8443,
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        }
                    },
                    {
                        "name": "probe80",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 80,
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        }
                    }
                ]
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', 'apps')]"
            ]
        },
        {
            "apiVersion": "2016-03-30",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[concat('dtr', padLeft(copyIndex(1), 2, '0'))]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "PIPCopy",
                "count": "[variables('dtr').instances]"
            },
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[concat(parameters('labName'), 'dtr', padLeft(copyIndex(1), 2, '0'))]"
                }
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat('dtr', padLeft(copyIndex(1), 2, '0'))]",
            "apiVersion": "2016-03-30",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "NICCopy",
                "count": "[variables('dtr').instances]"
            },
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[concat('10.0.2.', copyIndex(5))]",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat('dtr', padLeft(copyIndex(1), 2, '0')))]"
                            },
                            "subnet": {
                                "id": "[variables('dtr').subnet]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'dtr'),'/backendAddressPools/LoadBalancerBackEnd')]"
                                }
                            ]
                        }
                    }
                ],
                "dnsSettings": {
                    "dnsServers": []
                },
                "enableIPForwarding": false
            },
            "dependsOn": [
                "[variables('vNet').id]",
                "[resourceId('Microsoft.Network/publicIPAddresses', concat('dtr', padLeft(copyIndex(1), 2, '0')))]",
                "[concat('Microsoft.Network/loadBalancers/', 'dtr')]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat('dtr', padLeft(copyIndex(1), 2, '0'))]",
            "apiVersion": "2016-04-30-preview",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "VMcopy",
                "count": "[variables('dtr').instances]"
            },
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('dtr').vmSize]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('dtr').imagePublisher]",
                        "offer": "[variables('dtr').imageOffer]",
                        "sku": "[variables('dtr').imageSku]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[concat('dtr', padLeft(copyIndex(1), 2, '0'))]",
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "Premium_LRS"
                        },
                        "caching": "ReadWrite"
                    }
                },
                "osProfile": {
                    "computerName": "[concat('dtr', padLeft(copyIndex(1), 2, '0'))]",
                    "adminUsername": "eeadmin",
                    "adminPassword": "Docker123!"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat('dtr', padLeft(copyIndex(1), 2, '0')))]"
                        }
                    ]
                },
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', 'dtr')]"
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storage').diagnostics), '2016-01-01').primaryEndpoints.blob]"
                    }
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/availabilitySets/', variables('dtr').avSet)]",
                "[concat('Microsoft.Storage/storageAccounts/', variables('storage').diagnostics)]",
                "[resourceId('Microsoft.Network/networkInterfaces', concat('dtr', padLeft(copyIndex(1), 2, '0')))]"
            ],
            "resources": [
                {
                    "name": "InstallDocker",
                    "type": "extensions",
                    "location": "[resourceGroup().location]",
                    "apiVersion": "2016-04-30-preview",
                    "dependsOn": [
                        "[concat('Microsoft.Compute/virtualMachines/', 'manager01')]",
                        "[concat('Microsoft.Compute/virtualMachines/', concat('dtr', padLeft(copyIndex(1), 2, '0')))]"
                    ],
                    "tags": {
                        "displayName": "InstallDocker"
                    },
                    "properties": {
                        "publisher": "Microsoft.Azure.Extensions",
                        "type": "CustomScript",
                        "typeHandlerVersion": "2.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                            "fileUris": [
                                "[variables('scripts').installDocker]"
                            ]
                        },
                        "protectedSettings": {
                            "commandToExecute": "[concat('sh install-dockeree.sh ', parameters('dockerEEURL'), ' && docker swarm join --token ', json(split(reference(resourceId('Microsoft.Compute/virtualMachines/extensions/', 'manager01', 'InstallDocker')).instanceView.statuses[0].message, '@@@')[1]).tokens.worker, ' ', reference(concat('Microsoft.Network/networkInterfaces/', 'manager01'), '2017-03-01').ipConfigurations[0].properties.privateIPAddress, ':2377')]"
                        }
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "name": "dtr",
            "apiVersion": "2017-06-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "LoadBalancerFrontEnd",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'dtr')]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "LoadBalancerBackEnd"
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "ucp443",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'dtr'), '/frontendIpConfigurations/LoadBalancerFrontEnd')]"
                            },
                            "frontendPort": 443,
                            "backendPort": 443,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 4,
                            "protocol": "Tcp",
                            "loadDistribution": "Default",
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'dtr'), '/backendAddressPools/LoadBalancerBackEnd')]"
                            },
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'dtr'), '/probes/probe443')]"
                            }
                        }
                    },
                    {
                        "name": "ucp80",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'dtr'), '/frontendIpConfigurations/LoadBalancerFrontEnd')]"
                            },
                            "frontendPort": 80,
                            "backendPort": 80,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 4,
                            "protocol": "Tcp",
                            "loadDistribution": "Default",
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'dtr'), '/backendAddressPools/LoadBalancerBackEnd')]"
                            },
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'dtr'), '/probes/probe80')]"
                            }
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "probe443",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 443,
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        }
                    },
                    {
                        "name": "probe80",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 80,
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        }
                    }
                ]
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', 'dtr')]"
            ]
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "dc",
            "apiVersion": "2017-06-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[variables('dc').subnet]"
                            }
                        }
                    }
                ]
            },
            "dependsOn": [
                "[variables('vNet').id]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "dc",
            "apiVersion": "2016-04-30-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('dc').vmSize]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('dc').imagePublisher]",
                        "offer": "[variables('dc').imageOffer]",
                        "sku": "[variables('dc').imageSku]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "dc",
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "Premium_LRS"
                        },
                        "caching": "ReadWrite"
                    },
                    "dataDisks": [
                        {
                            "name": "dc-data-disk",
                            "diskSizeGB": 32,
                            "lun": 0,
                            "managedDisk": {
                                "storageAccountType": "Premium_LRS"
                            },
                            "createOption": "Empty",
                            "caching": "None"
                        }
                    ]
                },
                "osProfile": {
                    "computerName": "[concat(parameters('labName'), 'dc')]",
                    "adminUsername": "eeadmin",
                    "adminPassword": "Docker123!Docker123!"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', 'dc')]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storage').diagnostics), '2016-01-01').primaryEndpoints.blob]"
                    }
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storage').diagnostics)]",
                "[resourceId('Microsoft.Network/networkInterfaces', 'dc')]"
            ],
            "resources": [
                {
                    "type": "extensions",
                    "name": "CreateADForest",
                    "apiVersion": "2017-03-30",
                    "location": "[resourceGroup().location]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', 'dc')]"
                    ],
                    "properties": {
                        "publisher": "Microsoft.Powershell",
                        "type": "DSC",
                        "typeHandlerVersion": "2.19",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                            "ModulesUrl": "[variables('scripts').configureAD]",
                            "ConfigurationFunction": "CreateADPDC.ps1\\CreateADPDC",
                            "Properties": {
                                "DomainName": "[variables('dc').domainName]",
                                "AdminCreds": {
                                    "UserName": "eeadmin",
                                    "Password": "PrivateSettingsRef:AdminPassword"
                                }
                            }
                        },
                        "protectedSettings": {
                            "Items": {
                                "AdminPassword": "Docker123!Docker123!"
                            }
                        }
                    }
                },
                {
                    "type": "extensions",
                    "name": "CreateTestUsers",
                    "apiVersion": "2017-03-30",
                    "location": "[resourceGroup().location]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', 'dc')]",
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', 'dc', 'CreateADForest')]"
                    ],
                    "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "CustomScriptExtension",
                        "typeHandlerVersion": "1.9",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                            "fileUris": [
                                "[variables('scripts').createTestUsers]"
                            ],
                            "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File CreateTestUsers.ps1 -numberUsers 50 -targetOU \"CN=Users,DC=contoso,DC=local\"')]"
                        }
                    }
                }
            ]
        }
    ],
    "outputs": {
        "SwarmToken": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions/', 'manager01', 'InstallDocker')).instanceView.statuses[0].message]"
        },
        "SwarmToken2": {
            "type": "array",
            "value": "[split(reference(resourceId('Microsoft.Compute/virtualMachines/extensions/', 'manager01', 'InstallDocker')).instanceView.statuses[0].message, '@@@')]"
        },
        "SwarmToken3": {
            "type": "string",
            "value": "[split(reference(resourceId('Microsoft.Compute/virtualMachines/extensions/', 'manager01', 'InstallDocker')).instanceView.statuses[0].message, '@@@')[1]]"
        },
        "SwarmToken4": {
            "type": "string",
            "value": "[json(split(reference(resourceId('Microsoft.Compute/virtualMachines/extensions/', 'manager01', 'InstallDocker')).instanceView.statuses[0].message, '@@@')[1]).tokens.manager]"
        },
        "privateIp": {
            "type": "string",
            "value": "[reference(concat('Microsoft.Network/networkInterfaces/', 'manager01'), '2017-03-01').ipConfigurations[0].properties.privateIPAddress]"
        }
    }
}